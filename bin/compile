#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
. $BP_DIR/lib/common.sh

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

export_env_dir $ENV_DIR

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz}
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
status_pending "Installing OpenJDK ${javaVersion}"
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
status_done

# install and configure Datomic

SCRIPTS_TARGET_DIR=${BUILD_DIR}/scripts
mkdir ${SCRIPTS_TARGET_DIR}

if [ -z "${DATOMIC_VERSION}" ]
then
    # TODO: find a better (more dynamic) way to obtain a default
    DATOMIC_VERSION=0.9.5302
fi

DATOMIC_FREE_VERSION=true

if [ -n "${DATOMIC_TRANSACTOR_KEY}" ] && [ -n "${DATOMIC_LICENSE_USER}" ] && [ -n "${DATOMIC_LICENSE_PASSWORD}" ]
then
    DATOMIC_FREE_VERSION=false
fi

DATOMIC_DOMAIN=https://my.datomic.com
DATOMIC_REPO_FREE=${DATOMIC_DOMAIN}/downloads/free
DATOMIC_REPO_PRO=${DATOMIC_DOMAIN}/repo/com/datomic/datomic-pro

if [ ${DATOMIC_FREE_VERSION} == "true" ]
then
    echo -n "-----> Installing the Free version of Datomic ${DATOMIC_VERSION}... "
    curl -L --silent ${DATOMIC_REPO_FREE}/${DATOMIC_VERSION} > datomic.zip
    jar xf datomic.zip
    mv datomic-free-${DATOMIC_VERSION} ${BUILD_DIR}/datomic
    echo "done"
else
    echo -n "-----> Installing the Pro version of Datomic ${DATOMIC_VERSION}... "
    curl -L --silent -u ${DATOMIC_LICENSE_USER}:${DATOMIC_LICENSE_PASSWORD} ${DATOMIC_REPO_PRO}/${DATOMIC_VERSION}/datomic-pro-${DATOMIC_VERSION}.zip > datomic.zip
    jar xf datomic.zip
    mv datomic-pro-${DATOMIC_VERSION} ${BUILD_DIR}/datomic
    echo "done"
fi

#TODO - read env to support other STORAGE services? Or make another build-pack??

if [ ${DATOMIC_FREE_VERSION} == "false" ] ######### TODO: add this?? && [ ${DATOMIC_STORAGE} == "postgres" ]
then
    echo -n "-----> Configuring Datomic to connect to Postgres... "
    STORAGE_SERVICE=sql-transactor

    SAMPLE_PROPERTIES_FILE=${BUILD_DIR}/datomic/config/samples/${STORAGE_SERVICE}-template.properties
    OUTPUT_PROPERTIES_FILE=${SCRIPTS_TARGET_DIR}/transactor.properties

    SQL_URL=`echo $DATABASE_URL | sed 's?.*@\(.*\)?jdbc:postgresql://\1?'`
    SQL_USER=`echo $DATABASE_URL | sed -e 's?postgres://\(.*\):.*?\1?' -e 's?\(.*\):.*?\1?'`
    SQL_PASSWORD=`echo $DATABASE_URL | sed -e 's?postgres://\(.*\):.*?\1?' -e 's?.*:\(.*\)@.*?\1?'`

    sed     -e "s?^license-key=.*?license-key=${DATOMIC_TRANSACTOR_KEY}?"   \
            -e "s|^sql-url=.*|sql-url=${SQL_URL}|"                          \
            -e "s|^sql-user=.*|sql-user=${SQL_USER}|"                       \
            -e "s|^sql-password=.*|sql-password=${SQL_PASSWORD}|"           \
            -e 's/.*\(sql-driver-params=\).*/\1ssl=true;sslfactory=org.postgresql.ssl.NonValidatingFactory/' \
    ${SAMPLE_PROPERTIES_FILE} > ${OUTPUT_PROPERTIES_FILE}

    #TODO: automate the SQL set up?

    echo "done"
fi

cp $BP_DIR/vendor/datomic/* ${SCRIPTS_TARGET_DIR}

chmod -R +x ${BUILD_DIR}

PROFILE_PATH="${BUILD_DIR}/.profile.d/java.sh"
mkdir -p $(dirname ${PROFILE_PATH})
echo 'export PATH="/app/.jdk/bin:$PATH"' >> ${PROFILE_PATH}
echo 'export PATH="/app/datomic/bin:$PATH"' >> ${PROFILE_PATH}
echo 'export PATH="$SCRIPTS_TARGET_DIR:$PATH"' >> ${PROFILE_PATH}
echo 'export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Djava.rmi.server.useCodebaseOnly=true"' >> ${PROFILE_PATH}


# Install REDIS CLI - hack up a registry on REDIS until Heroku have something
mkdir -p ${CACHE_DIR}
cd $CACHE_DIR

if [ ! -f dist/redis-cli ]
then
    echo -n "-----> Obtaining and compiling REDIS... "


    wget http://download.redis.io/redis-stable.tar.gz
    tar xzf redis-stable.tar.gz
    (cd redis-stable && make)

    mkdir -p dist # where the CLI will be cached
    cp redis-stable/src/redis-cli dist

    # Don't need all of this being sent around
    rm -f redis-stable.tar.gz
    rm -rf redis-stable

    echo "done"
fi

cp dist/redis-cli ${SCRIPTS_TARGET_DIR}


